# Basic Questions

-- Q1 unique city
SELECT DISTINCT
    customer_city
FROM
    customers;
############################################################################

-- Q2 Count the number of orders placed in 2017.
SELECT 
    customer_id,
    order_estimated_delivery_date,
    COUNT(order_id) AS orders
FROM
    orders
WHERE
    order_estimated_delivery_date LIKE ('%2017%')
GROUP BY customer_id , order_estimated_delivery_date;
###########################################################################

-- Q3 find total sales per category
SELECT 
     upper(products.product_category) as category, round(SUM(payments.payment_value),2) as sales
       # upper for uppercase.
FROM
    products
       Join
    order_items
	ON products.product_id = order_items.product_id
        join
    payments on payments.order_id = order_items.order_id
GROUP BY category;
##########################################################################    
    
-- Q4 percentage of orders that paid money in installment
SELECT 
    (SUM(CASE
        WHEN payment_installments >= 1 THEN 1
        ELSE 0
    END) / COUNT(*)) * 100
FROM
    payments; 
########################################################################
  
-- Q5 count customer state
SELECT 
    COUNT(customer_id), customer_state
FROM
    customers
GROUP BY customer_state;
########################################################################


# Itermediate questions

-- Q1 no.of orders per month in 2018
select
     monthname(order_purchase_timestamp) month, count(order_id) as order_count
     from orders
    where year(order_purchase_timestamp)=2018
    group by month ;
########################################################################

-- Q2 Find the average number of products per order, grouped by customer city.
with count_per_order as (select
orders.customer_id, orders.order_id, count(order_items.order_item_id) as oc
from order_items
join orders
on order_items.order_id = orders.order_id
group by orders.customer_id, orders.order_id)
select customers.customer_city as city, round(avg(count_per_order.oc),2) as customer_avg
 from customers
join count_per_order 
on customers.customer_id = count_per_order.customer_id
group by city
order by customer_avg desc;
#########################################################################

-- 3. Calculate the percentage of total revenue(money earned from that products) contributed by each product category.
SELECT 
     upper(products.product_category) as category, round(SUM(payments.payment_value)/(select sum(payment_value) from payments)*100,2) as sales
FROM
    products
       Join
    order_items
	ON products.product_id = order_items.product_id
        join
    payments on payments.order_id = order_items.order_id
GROUP BY category
order by sales desc;
########################################################################

-- 4. Identify the correlation between product price and the number of times a product has been purchased.
select 
    count(products.product_id) as id_count,
     upper(products.product_category) as category,
     round(avg(order_items.price),2) as avg_price
from 
     order_items
join products
on order_items.product_id = products.product_id
group by products.product_category;
#################################################################################

-- Q5. Calculate the total revenue generated by each seller, and rank them by revenue.
with cte as (select
     sellers.seller_id, 
     round(sum(payments.payment_value),2) as revenue
     from sellers
     join order_items
on sellers.seller_id = order_items.seller_id
join payments
on order_items.order_id = payments.order_id
group by seller_id)
select *, dense_rank() OVER (order by revenue desc)as rn from cte
;
######################################## OR ############################################

select *, dense_rank() over(order by revenue desc) as rn from
(select order_items.seller_id, sum(payments.payment_value)
revenue from order_items join payments
on order_items.order_id = payments.order_id
group by order_items.seller_id) as a;
#######################################################################################3

# Advanced Questions

-- Q1. Calculate the moving average of order values for each customer over their order history.
select 
      customer_id,
      order_purchase_timestamp,
      payment,
      avg(payment) over (partition by customer_id order by order_purchase_timestamp
      rows between 2 preceding and current row) as moving_average
 from 
     (select 
     orders.customer_id,
      orders.order_purchase_timestamp,
      payments.payment_value as payment
from orders
join payments on orders.order_id = payments.order_id)as a
;
#################################################################################################

-- Q2. Calculate the cumulative sales per month for each year.
select year, month, payment, sum(payment) over (order by year, month) as cumulative_sales from
(select
    year(orders.order_purchase_timestamp) year,
    month(orders.order_purchase_timestamp) month,
    round(sum(payments.payment_value),2) as payment
from 
    orders join payments
    on orders.order_id = payments.order_id
group by year, month 
order by year, month) as a;
##################################################################################################33

-- Q3. Calculate the year-over-year growth rate of total sales.
with a as
(select
    year(orders.order_purchase_timestamp) year,
    round(sum(payments.payment_value),2) as payment
from 
    orders join payments
    on orders.order_id = payments.order_id
group by year
order by year) 
select year, ((payment - lag(payment ,1) over(order by year))/ lag(payment ,1) over(order by year)) * 100 as prev_yr_pay from a;
#####################################################################################################

-- Q4. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
 with a as(select
     customer_id,
	min(order_purchase_timestamp) as first_order
from orders
group by customer_id),
b as
    ( select 
       a.customer_id,
       count(distinct orders.order_purchase_timestamp) from a join orders 
       on a.customer_id = orders.customer_id
       and orders.order_purchase_timestamp > a.first_order
       and orders.order_purchase_timestamp < date_add(first_order, interval 6 month)
       group by a.customer_id)
       
select (count(distinct a.customer_id)/count(distinct b.customer_id))*100 from a left join b on a.customer_id = b.customer_id;
##########################################################################################################################

-- Q5. Identify the top 3 customers who spent the most money in each year.
select
   year, customer_id, payment, d_rank
from
(select 
      orders.customer_id,
      year(orders.order_purchase_timestamp) as year,
      sum(payments.payment_value) as payment,
      dense_rank() over (partition by year(orders.order_purchase_timestamp) order by sum(payments.payment_value) desc) d_rank
      from orders join payments
      on orders.order_id = payments.order_id
      group by year(orders.order_purchase_timestamp), orders.customer_id) as a where d_rank <= 3;
      
      
     select years, customer_id, payment, d_rank
from
(select year(orders.order_purchase_timestamp) years,
orders.customer_id,
sum(payments.payment_value) payment,
dense_rank() over(partition by year(orders.order_purchase_timestamp)
order by sum(payments.payment_value) desc) d_rank
from orders join payments 
on payments.order_id = orders.order_id
group by year(orders.order_purchase_timestamp),
orders.customer_id) as a
where d_rank <= 3 ;